@page "/"
@using TheIdleScrolls_Core.DataAccess
@using TheIdleScrolls_Web.CoreWrapper
@using TheIdleScrolls_Web.Components

@inject CoreWrapperModel CoreWrapper

<PageTitle>The Idle Scrolls</PageTitle>

@if (!CoreWrapper.GameLoopRunning)
{
	<p>Here are your previous characters:</p>

	<button @onclick="ReadCharacters">Refresh</button>

	@if (CoreWrapper.StoredCharacters != null)
	{
		<ul>
			@foreach (var metaData in Characters) // null check above
			{
				if (metaData != null)
				{
					<li style="cursor:pointer" @onclick=@(() => StartGame(metaData.Name))>@metaData.Name - Level @metaData.Level @metaData.Class</li>
				}
			}
		</ul>
	}
	<form action="" onsubmit=@(() => StartGame(NewCharName))>
		<input type="text" required pattern="[A-Za-z][A-Za-z0-9_\-]+" 
			title="Must start with a letter. May contain letters, digits, - and _" 
			@bind="@NewCharName" placeholder=""/>
		<button>Create</button>
	</form>
}
else
{
	<MainGameContainer></MainGameContainer>
}

@code
{
	string NewCharName { get; set; } = "";

	List<CharacterMetaData> Characters { get; set; } = new();

	protected override void OnInitialized()
	{
		base.OnInitialized();

		CoreWrapper.CharacterListChanged += (List<string> _) => StateHasChanged();
		CoreWrapper.StateChanged += StateHasChanged;

		ReadCharacters();
	}

	async Task ReadCharacters()
	{
		await CoreWrapper.UpdateSavedCharacters();
		Characters.Clear();
		foreach (var charName in CoreWrapper.StoredCharacters.Where(c => !c.StartsWith("_")))
		{
			var metaData = await CoreWrapper.GetCharacterMetaData(charName);
			if (metaData != null)
				Characters.Add(metaData);
		}
		StateHasChanged();
	}

	async Task StartGame(string characterName)
	{
		CoreWrapper.Reset();
		await CoreWrapper.LoadCharacter(characterName);
		CoreWrapper.StartGameLoop();
		Console.WriteLine($"Game started as {characterName}");
	}
}