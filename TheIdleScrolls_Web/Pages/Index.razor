@page "/"
@using TheIdleScrolls_Core.DataAccess
@using TheIdleScrolls_Web.CoreWrapper
@using TheIdleScrolls_Web.Components

@inject CoreWrapperModel CoreWrapper

<PageTitle>The Idle Scrolls</PageTitle>
<div style="position:relative">
@if (!CoreWrapper.GameLoopRunning)
{
	<p>Enter the name of a new character</p>
	<form action="" onsubmit=@(() => StartGame(NewCharName))>
		<input type="text" required pattern="[A-Za-z][A-Za-z0-9_\-]+"
		   title="Must start with a letter. May contain letters, digits, - and _"
		   @bind="@NewCharName" placeholder="" 
		   style="margin-left: 10px;"/>
		<button>Create</button>
	</form>

	@if (CoreWrapper.StoredCharacters != null && CoreWrapper.StoredCharacters.Count > 0)
	{
		<p style="margin-top: 20px">Or select an existing one</p>
		<div id="storedCharsFrame">
			@foreach (var metaData in Characters)
			{
				if (metaData != null)
				{
					<CharacterTile Character=@metaData OnClicked="StartGame"/> 
				}
			}
		</div>
	}

	<button id="settingsButton" @onclick=@(() => ShowSettings = true)>Settings</button>
	@if (ShowSettings)
    {
		<MainOptionSettings OnClicked=@(() => ShowSettings = false) OnDataChanged="ReadCharacters" />
	}
}
else
{
	<MainGameContainer/>
}
<ExpiringMessagesDisplay/>
</div>
<style>
	#storedCharsFrame {
		display: flex;
		flex-direction: row;
		flex-wrap: wrap;
		margin: 10px;
		gap: 10px;
		width: 600px;
	}

	#settingsButton {
        margin-top: 20px;
	}
</style>

@code
{
	string NewCharName { get; set; } = "";

	List<CharacterMetaData> Characters { get; set; } = new();

	bool ShowSettings { get; set; } = false;

	protected override void OnInitialized()
	{
		base.OnInitialized();

		CoreWrapper.CharacterListChanged += (List<string> _) => StateHasChanged();
		CoreWrapper.StateChanged += StateHasChanged;
		CoreWrapper.GameLoopRunStateChanged += (bool active) =>
		{
			if (!active)
			{
				_ = ReadCharacters();
			}
		};

		_ = ReadCharacters();
	}

	async Task ReadCharacters()
	{
		await CoreWrapper.UpdateSavedCharacters();
		Characters.Clear();
		var storedChars = CoreWrapper.StoredCharacters.Where(c => !c.StartsWith("_"));
		foreach (var charName in storedChars)
		{
			var metaData = await CoreWrapper.GetCharacterMetaData(charName);
			if (metaData != null)
			{
				Characters.Add(metaData);
			}
		}
		StateHasChanged();
	}

	async Task StartGame(string characterName)
	{
		CoreWrapper.Reset();
		await CoreWrapper.LoadCharacter(characterName);
		_ = CoreWrapper.StartGameLoop();
	}
}