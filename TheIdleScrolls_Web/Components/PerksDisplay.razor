@using TheIdleScrolls_Core
@using TheIdleScrolls_Core.Components
@using TheIdleScrolls_Core.Modifiers
@using TheIdleScrolls_Web.CoreWrapper

@inject CoreWrapperModel CoreWrapper

<div id="perks-container">

    <div class="perks-list">
        @foreach (var perk in Perks.Where(p => p.Modifiers.Count > 0))
        {
            <PerkTile PerkId=@perk.Id PerksComp=@PerksComponent IsNew=@(!SeenPerks.Contains(perk.Id)) />
        }
    </div>

    <div id="perks-header">
        <p style="margin-bottom: 0">Points Spent: @PerksUsed / @PerksLimit</p>
        @if (FreePerkPoints > 0)
        {   
            <p id="perks-available-points">@FreePerkPoints Point@(FreePerkPoints == 1 ? "" : "s") Available</p>
        }
    </div>

    @if (NewPerks > 0)
    {
        <div id="perks-new-indicator">
            @NewPerks newly unlocked!
        </div>
    }

</div>


<style>
    #perks-container {
        display: flex;
        flex-direction: column;
        max-height: 100%;
        overflow-y: auto;
    }

    #perks-header {
        padding: 1.0rem;
        border-top: 2px double var(--frame-color);
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }

    #perks-new-indicator {
        position: absolute;
        top: 1rem;
        left: 50%;
        transform: translateX(-50%);
        padding: 5px;
        background-color: palegreen;
        border: 2px solid mediumseagreen;
        color: black;
        font-weight: bold;
        text-align: center;
    }

    #perks-available-points {
        margin-left: 2rem;
        margin-bottom: 0;
        font-weight: bold;
        color: green;        
    }

    .perks-list {
        padding: 5px;
        max-height: 100%;
        overflow-y: auto;
    }
</style>

@code {
    protected override void OnInitialized()
    {
        CoreWrapper.GameRunner.GetEventEmitter().PlayerPerksChanged += (_) => {
            if (PerksComponent == null)
                PerksComponent = CoreWrapper.PlayerCharacter?.GetComponent<PerksComponent>();
            CoreWrapper.SeenPerks = Perks.Select(p => p.Id).ToList();
            StateHasChanged(); 
        };
        CoreWrapper.GameRunner.GetEventEmitter().AvailablePerkPointsChanged += (_) => StateHasChanged();
        base.OnInitialized();
        PerksComponent = CoreWrapper.PlayerCharacter?.GetComponent<PerksComponent>();

        // Save previously seen perks but update the list of seen perks in the CoreWrapper
        SeenPerks = new List<string>(CoreWrapper.SeenPerks);
        CoreWrapper.SeenPerks = Perks.Select(p => p.Id).ToList();
    }

    PerksComponent? PerksComponent = null;
    List<Perk> Perks => PerksComponent?.GetPerks() ?? [];
    int PerksUsed => PerksComponent?.GetUsedPerkPoints() ?? 0;
    int PerksLimit => PerksComponent?.PerkPointLimit ?? 0;
    int FreePerkPoints => PerksLimit - PerksUsed;

    List<string> SeenPerks = [];
    int NewPerks => Perks.Count - SeenPerks.Count;
}
