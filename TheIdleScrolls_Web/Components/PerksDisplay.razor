@using TheIdleScrolls_Core
@using TheIdleScrolls_Core.Components
@using TheIdleScrolls_Core.Modifiers
@using TheIdleScrolls_Web.CoreWrapper

@inject CoreWrapperModel CoreWrapper

<div class="perks-container">
    @foreach (var perk in Perks.Where(p => p.Modifiers.Count > 0))
    {
        bool isActive = IsActive(perk.Id);
        string hiddenStyle = "display: none";
        <div class="perk @PerkClasses(perk)">
            <div class="perk-name">@perk.Name</div>
            @if (perk.AlwaysActive)
            {
                <div class="perk-always-active-indicator">Permanent</div>
            }
            <div class="perk-description">@perk.Description</div>
            <div class="perk-modifiers">
                @foreach (var modifier in perk.Modifiers)
                {
                    <div class="perk-modifier">➤ @modifier.ToPrettyString()</div>
                }
            </div>
            <div class="perk-buttons-area">
                @if (!perk.AlwaysActive)
                {
                    <button class="perk-button perk-button-deactivate" 
                        style="@(isActive ? "" : hiddenStyle)"
                        @onclick=@(() => SetActive(perk.Id, false))>-</button>
                    <button class="perk-button perk-button-activate" 
                        style="@(isActive ? hiddenStyle : "")"
                        @onclick=@(() => SetActive(perk.Id, true))>+</button>
                }
            </div>
            
        </div>
    }
</div>


<style>
    .perks-container {
        padding: 5px;
        max-height: 100%;
        overflow-y: auto;
    }

    .perk {
        margin: 5px;
        padding: 5px;
        border: 1px solid var(--frame-color);
        position: relative;
    }

    .perk-name {
        font-weight: bold;
    }

    .perk-description {
        margin: 2px;
    }

    .perk-modifier {
        margin: 2px;
        margin-left: 7px;
        font-style: italic;
        font-size: small;
    }

    .perk-active {
        color: black;
        background-color: var(--back-color-special);
    }

    .perk-inactive {
        color: gray;
        font-style: italic;
        background-color: white;
    }

    .perk-always-active {
        border: solid 2px var(--frame-color);
    }

    .perk-always-active-indicator {
        position: absolute;
        top: 0.5rem;
        right: 0.5rem;
        font-style: italic;
        font-size: smaller;
        color: var(--frame-color);
    }

    .perk-buttons-area {
        position: absolute;
        bottom: 0.5rem;
        right: 0.5rem;
        display: flex;
        flex-direction: row;
        gap: 1rem;
    }

    button.perk-button {
        cursor: pointer;
        min-height: 0;
        min-width: 0;
        height: 2rem;
        width: 2rem;
    }

    button.perk-button-activate {
        background-color: greenyellow;
    }

    button.perk-button-deactivate {
        background-color: coral;
    }

</style>

@code {
    protected override void OnInitialized()
    {
        CoreWrapper.StateChanged += StateHasChanged;
        base.OnInitialized();
    }

    List<Perk> Perks => CoreWrapper.PlayerCharacter?.GetComponent<PerksComponent>()?.GetPerks() ?? [];

    bool IsActive(string id)
    {
        return CoreWrapper.PlayerCharacter?.GetComponent<PerksComponent>()?.IsPerkActive(id) ?? false; 
    }

    string PerkClasses(Perk perk)
    {
        string classes = IsActive(perk.Id) ? "perk-active" : "perk-inactive";
        if (perk.AlwaysActive)
            classes += " perk-always-active";
        return classes;
    }

    void SetActive(string id, bool active)
    {
        if (CoreWrapper.PlayerCharacter == null)
            return;
        CoreWrapper.InputHandler.SetPerkActive(CoreWrapper.PlayerCharacter.Id, id, active);
    }
}
