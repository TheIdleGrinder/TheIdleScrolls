@using TheIdleScrolls_Core
@using TheIdleScrolls_Core.Components
@using TheIdleScrolls_Core.Modifiers
@using TheIdleScrolls_Web.CoreWrapper

@inject CoreWrapperModel CoreWrapper

<div id="perks-container">

    <div class="perks-list">
        @foreach (var perk in Perks.Where(p => p.Modifiers.Count > 0))
        {
            bool isActive = IsActive(perk.Id);
            string unavailableStyle = "background-color: lightgray";
            string hiddenStyle = "visibility: hidden";
            <div class="perk @PerkClasses(perk)">
                <div class="perk-name">@GetTitleLine(perk)</div>
                @if (perk.Permanent)
                {
                    <div class="perk-always-active-indicator">Permanent</div>
                }
                <div class="perk-description">@perk.Description</div>
                <div class="perk-modifiers">
                    @foreach (var modifier in perk.Modifiers)
                    {
                        <div class="perk-modifier">➤ @modifier.ToPrettyString()</div>
                    }
                </div>
                <div class="perk-buttons-area">
                    @if (!perk.Permanent)
                    {
                        <button class="perk-button perk-button-deactivate" 
                            style="@(isActive ? "" : hiddenStyle)"
                            disabled="@(GetLevel(perk.Id) == 0)"
                            @onclick=@(() => SetLevel(perk.Id, GetLevel(perk.Id) - 1))>-</button>
                        <button class="perk-button perk-button-activate" 
                            style="@(!CanIncreaseLevel(perk) ? unavailableStyle : (FreePerkPoints > 0 ? "" : unavailableStyle))"
                            disabled="@(!CanIncreaseLevel(perk) || FreePerkPoints == 0)"
                            @onclick=@(() => SetLevel(perk.Id, GetLevel(perk.Id) + 1))>+</button>
                    }
                </div>
            
            </div>
        }
    </div>

    <div id="perks-header">
        <p style="margin-bottom: 0">Points Spent: @PerksUsed / @PerksLimit</p>
        @if (FreePerkPoints > 0)
        {
            <p id="perks-available-points">@FreePerkPoints Point@(FreePerkPoints == 1 ? "" : "s") Available</p>
        }
    </div>

</div>


<style>
    #perks-container {
        display: flex;
        flex-direction: column;
        max-height: 100%;
        overflow-y: auto;
    }

    #perks-header {
        padding: 1.0rem;
        border-top: 2px double var(--frame-color);
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }

    #perks-available-points {
        margin-left: 2rem;
        margin-bottom: 0;
        font-weight: bold;
        color: green;        
    }

    .perks-list {
        padding: 5px;
        max-height: 100%;
        overflow-y: auto;
    }

    .perk {
        margin: 5px;
        padding: 5px;
        border: 1px solid var(--frame-color);
        position: relative;
    }

    .perk-name {
        font-weight: bold;
    }

    .perk-description {
        margin: 2px;
    }

    .perk-modifier {
        margin: 2px;
        margin-left: 7px;
        font-style: italic;
        font-size: small;
    }

    .perk-active {
        color: black;
        background-color: var(--back-color-special);
    }

    .perk-inactive {
        color: gray;
        font-style: italic;
        background-color: white;
    }

    .perk-always-active {
        border: solid 2px var(--frame-color);
    }

    .perk-always-active-indicator {
        position: absolute;
        top: 0.5rem;
        right: 0.5rem;
        font-style: italic;
        font-size: smaller;
        color: var(--frame-color);
    }

    .perk-buttons-area {
        position: absolute;
        bottom: 0.5rem;
        right: 0.5rem;
        display: flex;
        flex-direction: row;
        gap: 1rem;
    }

    button.perk-button {
        cursor: pointer;
        min-height: 0;
        min-width: 0;
        height: 2rem;
        width: 2rem;
    }

    button.perk-button-activate {
        background-color: greenyellow;
    }

    button.perk-button-deactivate {
        background-color: coral;
    }

</style>

@code {
    protected override void OnInitialized()
    {
        CoreWrapper.StateChanged += StateHasChanged;
        base.OnInitialized();
    }

    PerksComponent? PerksComponent => CoreWrapper.PlayerCharacter?.GetComponent<PerksComponent>();
    List<Perk> Perks => PerksComponent?.GetPerks() ?? [];
    int PerksUsed => PerksComponent?.GetUsedPerkPoints() ?? 0;
    int PerksLimit => PerksComponent?.PerkPointLimit ?? 0;
    int FreePerkPoints => PerksLimit - PerksUsed;

    bool IsActive(string id)
    {
        return PerksComponent?.IsPerkActive(id) ?? false; 
    }

    int GetLevel(string id)
    {
        return PerksComponent?.GetPerkLevel(id) ?? 0;
    }

    string GetTitleLine(Perk perk) => $"{perk.Name} " + (perk.MaxLevel > 1 ? $"({GetLevel(perk.Id)}/{perk.MaxLevel})" : "");

    bool CanIncreaseLevel(Perk perk)
    {
        int level = GetLevel(perk.Id);
        return level < perk.MaxLevel;
    }

    string PerkClasses(Perk perk)
    {
        string classes = IsActive(perk.Id) ? "perk-active" : "perk-inactive";
        if (perk.Permanent)
            classes += " perk-always-active";
        return classes;
    }

    void SetLevel(string id, int level)
    {
        if (CoreWrapper.PlayerCharacter == null)
            return;
        CoreWrapper.InputHandler.SetPerkLevel(CoreWrapper.PlayerCharacter.Id, id, level);
    }
}
