@using TheIdleScrolls_Web.CoreWrapper
@using TheIdleScrolls_Core
@using TheIdleScrolls_Core.Definitions


@inject CoreWrapperModel CoreWrapper

<div id="helpFrame">
    <h4>Combat</h4>
    <p>Combat in The Idle Scrolls is extremely simple: While your enemy has hit points remaining, your character will automatically attack. 
        Once the hit points reach zero, the enemy is defeated and you receive experience points.
    </p>

    <h4>Character Level</h4>
    <p>Once you have gathered enough experience points, your character level will increase. Each level will grant you a permanent additive 
        @($"{Stats.AttackBonusPerLevel:0.#%}") increase to your attack damage.
    </p>

    @if (Items)
    {
        <h4>Items</h4>
        <p>Equipment is used to improve your effectiveness in combat. You can manage your equipped items in the inventory screen. 
        </p>

        <h4>Weapons</h4>
        <p>Weapons are occupy either one or both hand slots.</p> 
        <p>You are allowed to wield two one-handed weapons at the same time. Your attack damage while dual wielding is the average of the
            weapons' damage values and you receive a multiplicative @($"{Stats.DualWieldAttackSpeedMulti:0.#%}") boost to your attack speed.
        </p>
    }

    @if (Armor)
    {
        <h4>Armor</h4>
        <p>There are several types of armor items: helmets, body armors, gloves, boots and shields. Each type occupies a specific equipment slot.
        </p>
    }

    @if (Travel)
    {
        <h4>Item Material</h4>
        <p>As you progress in the game, you will come across items that are made from higher level materials. These items are significantly more 
            effective than their respective counterparts from lesser materials.
        </p>

        <h4>Item Rarity</h4>
        <p>Items you find from enemies in the wilderness always drop with normal rarity. It is, however, possible to obtain improved items as 
            reward for dungeon completions or by crafting them. A rare item is identified by the <em>+ X</em> behind its name, with 
            <em>X</em> being the rarity level. Rare items also have their names displayed in different colors, depending on their rarity level.
        </p>
    }

    @if (Abilities)
    {
        <h4>Abilities</h4>
        <p>Most actions you take, like fighting with a weapon, are associated with a specific ability. The level of an ability influences the 
            effectiveness of those actions. For example, when fighting with a sword, your attack speed is modified by your ability to use long blades. 
            In turn, abilities will gain experience and levels through continued use.
        </p>
        <p>Different abilities modify their corresponding stats in different ways:</p>
        <ul>
            <li><strong>Weapons: </strong>Increased damage and attack speed</li>
            <li><strong>Armor: </strong>Increased armor or evasion rating</li>
            <li><strong>Crafting: </strong>Increased chance of reforging success</li>
        </ul>
    }

    @if (Perks)
    {
        <h4>Perks</h4>
        <p>Perks are passive abilities that provide a variety of bonuses to your character. Some perks are unlocked right from the start, while 
            others are unlocked by earning achievements. You can view your unlocked perks in the perks screen.
        </p>
    }

    @if (Armor)
    {
        <h4>Time Limit</h4>
        <p>Enemies that you encounter outside the training grounds are going to fight back. You only have a limited amount of time to 
            defeat them, before you get overpowered and lose the fight. Higher level zones have shorter time limits. 
            But don't worry, there is no direct penalty for being defeated.
        </p>

        <h4>Protection</h4>
        <p>There are several ways to protect yourself against dangerous enemies.</p>
        <p><strong>Armor: </strong>Being armored slows the speed at which you run out of time. Every point of armor rating provides
            @($"{Stats.ArmorSlowdownPerPoint:0.#%}") resistance to time loss. So @(1 / Stats.ArmorSlowdownPerPoint) armor 
            points will halve the speed at which time runs out.
        </p>
        <p><strong>Evasion: </strong>Being evasive allows you to prevent your opponents from getting to you. The evasion meter charges up 
            as you fight and once it is full, the fight clock will be temporarily frozen. The ratio of charge and effect duration depends on 
            your evasion rating. At @($"{(1 / Stats.EvasionBonusPerPoint):0.#}") points of evasion rating, the durations will be equal. So every 
            point of evasion rating effectively slows the fight clock by @($"{Stats.EvasionBonusPerPoint:0.#%}").
        </p>
        <p>The effectiveness of protection will be reduced as the level of your enemies increases, so you have to keep improving your 
            defences as you progress through the game.</p>

        <h4>Encumbrance</h4>
        <p>Armor items will protect and you in battle but most of them also encumber you. Encumbrance multiplicatively increases attack cooldown 
            by 1% per point. So an encumbrance 100% halves the speed at which you attack.
        </p>
    }

    @if (Travel)
    {
        <h4>Dungeons</h4>
        <p>Dungeons are special areas that are outside of the main game world. A dungeon consists of one or more floors, each one containing 
            one or more enemies. Enemies on a dungeon floor share a time limit and are fought one after another. Once all enemies on a floor have 
            been defeated, you automatically move on to the next one. Finishing every floor of a dungeon awards you a guaranteed item drop with a 
            chance for the item to drop with higher rarity. If you do not manage to clear a floor in time, you will be moved back to the 
            overworld and will have to start the dungeon from the beginning on your next attempt.
        </p>
    }

    @if (Crafting)
    {
        <h4>Crafting</h4>
        <p>Trying to find the perfect item for your character can be a daunting task. A much more reliable way to get your character equipped 
            with the best gear is to craft it yourself. There are two crafting methods that complement each other: You can create new items and also reforge 
            existing ones to improve them. Starting a crafting procedure costs an amount of coins based on the item's drop level. The process itself is going to take some
            time. The length is based on the material of the target item.
        </p>
        <p>Crafting new items is simple enough: In exchange for a certain amount of coins, you can create an item from among your unlocked blueprints. More items become available
            as you clear higher level dungeons. Creating new items take some time, but it never fails.
        </p>
        <p>The best way to obtain high-rarity items for your character to use, is to take an item that has a desirable base type and reforge it. 
            If the reforging fails, the item's rarity will be reduced by one level.
            Success and failure chances are determined by the item's current rarity level and your character's crafting ability.
        </p>
        <p>Spending coins on reforging will train your crafting ability.
        </p>
    }

    @if (Bounties)
    {
        <h4>Bounty Hunts</h4>
        <p>Bounties are a reliable source of income while grinding and exploring the world. There are two ways to earn these rewards: 
        </p>
        <ul>
            <li>Whenever you unlock a new area level in the wilderness, you will receive coins based on that level</li>
            <li>Everytime you defeat @(TheIdleScrolls_Core.Systems.BountySystem.EnemiesPerHunt) enemies in the wild, you will be 
                awarded a bounty. The bounty amount is based on the lowest level of enemy you defeated during this hunt. But be careful: 
                the reward will be reduced if you are hunting for enemies below the highest available level.
            </li>
        </ul>
        <p>Bounty hunts are paused when entering a dungeon, but they will be reset when starting a new session.</p>
    }
</div>

<style>
    #helpFrame {
        display:flex;
        flex-direction: column;
        overflow: auto;
        height: 100%;
        padding: 10px;
    }
</style>

@code {

    protected override void OnInitialized()
    {
        CoreWrapper.StateChanged += StateHasChanged;
        base.OnInitialized();
    }

    bool Items => CoreWrapper.IsFeatureAvailable(GameFeature.Inventory);
    bool Armor => CoreWrapper.IsFeatureAvailable(GameFeature.Armor);
    bool Abilities => CoreWrapper.IsFeatureAvailable(GameFeature.Abilities);
    bool Perks => CoreWrapper.IsFeatureAvailable(GameFeature.Perks);
    bool Travel => CoreWrapper.IsFeatureAvailable(GameFeature.Travel);
    bool Crafting => CoreWrapper.IsFeatureAvailable(GameFeature.Crafting);
    bool Bounties => CoreWrapper.IsFeatureAvailable(GameFeature.Bounties);
}
