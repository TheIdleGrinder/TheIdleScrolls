@using TheIdleScrolls_Core
@using TheIdleScrolls_Web.CoreWrapper

@inject CoreWrapperModel CoreWrapper

<div id="inventoryContainer" class="scrolling-table">
    <table>
        <thead>
            <tr>
                <th>Item</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Items)
            {
                <tr>
                    <td class="selectable @(GetSelectionClass(item)) @(CssUtilities.GetClassesForItem(item))" 
                    @onclick=@(() => SelectItem(item.Id))
                    @ondblclick=@(() => EquipItem(item.Id))
                    @onkeypress="HandleKeyPress">
                        @item.Name
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<style>
    #inventoryContainer {
        margin: 0px;
        background-color: var(--back-color);
    }
</style>

@code {
    List<ItemRepresentation> Items => CoreWrapper.Inventory;

    int selectedIndex = -1;

    protected override void OnInitialized()
    {
        CoreWrapper.StateChanged += StateHasChanged;
        CoreWrapper.StateChanged += UpdateSelectedItem;
        base.OnInitialized();
    }

    void SelectItem(uint id)
    {
        CoreWrapper.ToggleItemHighlight(id);
        selectedIndex = Items.FindIndex(item => item.Id == id);
        StateHasChanged();
    }

    void SelectItemByIndex(int index)
    {
        if (Items.Count == 0)
        {
            SelectItem(uint.MaxValue);
        }
        else if (index < 0)
        {
            SelectItem(0);
        }
        else if (index >= Items.Count)
        {
            SelectItem(Items[Items.Count - 1].Id);
        }
        else
        {
            SelectItem(Items[index].Id);
        }
    }

    void EquipItem(uint id)
    {
        CoreWrapper.InputHandler.EquipItem(CoreWrapper.Character.Id, id);
    }

    void HandleKeyPress(KeyboardEventArgs e)
    {
        string key = e.Key;
        if (key == "ArrowUp")
        {
            SelectItemByIndex(selectedIndex - 1);
        }
        else if (key == "ArrowDown")
        {
            SelectItemByIndex(selectedIndex + 1);
        }
    }

    string GetSelectionClass(ItemRepresentation item)
    {
        return CoreWrapper.IsItemHighlighted(item.Id) ? "selectedItem" : "";
    }

    void UpdateSelectedItem()
    {
        // Reset selected index if an equipped or no item is highlighted
        if (CoreWrapper.HighlightedItem == uint.MaxValue || CoreWrapper.Equipment.Items.Any(item => item.Id == CoreWrapper.HighlightedItem))
        {
            selectedIndex = -1;
        }
        // Select a new item if the previously selected one is gone (e.g. was sold)
        if (selectedIndex >= 0 && (selectedIndex >= Items.Count || !CoreWrapper.IsItemHighlighted(Items[selectedIndex].Id)))
        {
            selectedIndex = Math.Min(selectedIndex, Items.Count - 1);
            if (selectedIndex >= 0)
            {
                SelectItem(Items[selectedIndex].Id);
            }
        }
    }
}
