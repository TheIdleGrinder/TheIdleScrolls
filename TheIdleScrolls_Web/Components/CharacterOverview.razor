@using TheIdleScrolls_Web.CoreWrapper

@inject CoreWrapperModel CoreWrapper

<div class="outer charOuter">
    <h2>@CoreWrapper.Character.Name</h2>

    <p>Level @CoreWrapper.Character.Level @CoreWrapper.Character.Class</p>

    <progress title="@CoreWrapper.XpCurrent / @CoreWrapper.XpTarget XP" value="@CoreWrapper.XpCurrent" max="@CoreWrapper.XpTarget"></progress>

    <hr class="thick">

    <table>
        <tr>
            <td>Damage</td>
            <td>@FormatValue(Stats.Damage)</td>
            <td>@(FormatValue(Stats.Damage / Stats.Cooldown)) / s</td>
            <td><progress value="@AttackProgress" max="@AttackCooldown"></progress></td>
        </tr>
        <tr>
            <td>Armor</td>
            <td>@FormatValue(Stats.Armor)</td>
        </tr>
        <tr>
            <td>Evasion</td>
            <td>@FormatValue(Stats.Evasion)</td>
        </tr>
        <tr>
            <td>Encumbrance</td>
            <td>@(FormatValue(Stats.Encumbrance)) %</td>
        </tr>
    </table>
</div>


@code {
    CharacterStats Stats => CoreWrapper.CharacterStats;

    protected override void OnInitialized()
    {
        CoreWrapper.StateChanged += StateHasChanged;
        base.OnInitialized();
    }

    int AttackCooldown => CooldownToInt(Stats.Cooldown);
    int AttackProgress => CooldownToInt(Stats.Cooldown) - CooldownToInt(Stats.CooldownRemaining);

    string FormatValue(double value) => $"{value:0.##}";
    int CooldownToInt(double time) => (int)(time * 1000);    
    string FormatTime(double time) => $"{time:0.##} s";
}