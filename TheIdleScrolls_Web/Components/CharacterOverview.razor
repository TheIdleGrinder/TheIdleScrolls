@using TheIdleScrolls_Web.CoreWrapper

@inject CoreWrapperModel CoreWrapper

<div class="charOuter">
    <h2>@CoreWrapper.Character.Name</h2>

    <p style="margin-bottom: 0.0rem">Level @CoreWrapper.Character.Level @CoreWrapper.Character.Class</p>

    <div id="character-xp-bar-frame" class="progressFrame" style="justify-content: start">
        <div id="character-xp-bar-fill" class="progressFill" style="width: @($"{xpPct:0%}");"></div>
    </div>

    <table id="character-stat-table">
        <tr class="normal-font">
            <th title="Damage per second">DPS</th>
            <td>@(FormatValue(Stats.Damage / Stats.Cooldown))</td>
            <th>Defense Rating</th>
            <td>@FormatValue(Stats.DefenseRating)</td>
        </tr>
        <tr class="small-font">
            <th>Damage</th>
            <td>@FormatValue(Stats.Damage)</td>
            <th>Armor</th>
            <td>@FormatValue(Stats.Armor)</td>
        </tr>
        <tr class="small-font">
            <th>Attack Time</th>
            <td>@FormatValue(Stats.Cooldown) s</td>
            <th>Evasion</th>
            <td>@(FormatValue(Stats.Evasion))</td>
        </tr>
        <tr>
            <td colspan="2"><progress value="@AttackProgress" max="@AttackCooldown"></progress></td>
        </tr>
    </table>
</div>

<style>
    #character-stat-table {
        
    }

    #character-xp-bar-frame {
        width: 70%;
        margin-bottom: 0.5rem;
        border: 1px solid var(--frame-color);
        background: inherit;
    }

    #character-xp-bar-fill {
        background-color: royalblue;
        height: 8px;
    }

</style>


@code {
    CharacterStats Stats => CoreWrapper.CharacterStats;

    protected override void OnInitialized()
    {
        CoreWrapper.StateChanged += StateHasChanged;
        base.OnInitialized();
    }

    double xpPct => 1.0 * CoreWrapper.XpCurrent / CoreWrapper.XpTarget;

    int AttackCooldown => CooldownToInt(Stats.Cooldown);
    int AttackProgress => CooldownToInt(Stats.Cooldown) - CooldownToInt(Stats.CooldownRemaining);

    string FormatValue(double value) => value.ToBigIntString();
    int CooldownToInt(double time) => (int)(time * 1000);    
    string FormatTime(double time) => $"{time:0.##} s";
}