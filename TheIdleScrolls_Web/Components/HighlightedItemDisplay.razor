@using TheIdleScrolls_Core
@using TheIdleScrolls_Core.Items
@using TheIdleScrolls_Web.Components.Subcomponents
@using TheIdleScrolls_Web.CoreWrapper

@inject CoreWrapperModel CoreWrapper

<div id="highlightedItemContainer">
    <div id="highlightedItem" style="@(HighlightedItem == null ? "visibility:hidden" : "")">
        <h5 id="highlightedItemName" class="@(CssUtilities.GetClassesForItem(HighlightedItem))">@HighlightedItem?.Name</h5>
        @if (HighlightedItem?.Crafted ?? false)
        {
            <span id="crafted-line">Crafted</span>
        }
        <div id="description-lines">
            <span>@HighlightedItem?.Type</span>
            <span>Level @HighlightedItem?.DropLevel</span>
            <span>Ability: @HighlightedItem?.RelatedAbility</span>
            @if (HighlightedItem?.WeaponAspect != null)
            {
                <span style="margin-top: 0.5rem">
                    Damage: @HighlightedItem?.WeaponAspect?.BaseDamage
                    @foreach (ComparisonResult comp in HighlightedItem?.CompareToEquipment(ItemComparator.CompareDamage) ?? [])
                    {
                        <ItemStatComparison ComparisonResult=@comp></ItemStatComparison>
                    }
                </span>
                <span>
                    Attack Time: @(HighlightedItem?.WeaponAspect?.BaseCooldown) s
                    @foreach (ComparisonResult comp in HighlightedItem?.CompareToEquipment(ItemComparator.CompareCooldown) ?? [])
                    {
                        <ItemStatComparison ComparisonResult=@comp Suffix=" s"></ItemStatComparison>
                    }
                </span>
                <span>
                    DPS: @($"{HighlightedItem?.WeaponAspect?.Dps ?? 0.0:0.##}")
                    @foreach (ComparisonResult comp in HighlightedItem?.CompareToEquipment(ItemComparator.CompareDps) ?? [])
                    {
                        <ItemStatComparison ComparisonResult=@comp></ItemStatComparison>
                    }
                </span>
            }
            @if (HighlightedItem?.ArmorAspect != null)
            {
                if ((HighlightedItem?.ArmorAspect?.BaseArmor ?? 0.0) != 0.0)
                {
                    <span style="margin-top: 0.5rem">
                        Armor: @HighlightedItem?.ArmorAspect?.BaseArmor
                        @foreach (ComparisonResult comp in HighlightedItem?.CompareToEquipment(ItemComparator.CompareArmor) ?? [])
                        {
                            <ItemStatComparison ComparisonResult=@comp></ItemStatComparison>
                        }
                    </span>
                }
                if ((HighlightedItem?.ArmorAspect?.BaseEvasion ?? 0.0) != 0.0)
                {
                    <span>
                        Evasion: @HighlightedItem?.ArmorAspect?.BaseEvasion
                        @foreach (ComparisonResult comp in HighlightedItem?.CompareToEquipment(ItemComparator.CompareEvasion) ?? [])
                        {
                            <ItemStatComparison ComparisonResult=@comp></ItemStatComparison>
                        }
                    </span>
                }
            }
            @if (HighlightedItem?.Encumbrance != null && HighlightedItem?.Encumbrance > 0)
            {
                <span>
                    Encumbrance: @(HighlightedItem?.Encumbrance)%
                    @foreach (ComparisonResult comp in HighlightedItem?.CompareToEquipment(ItemComparator.CompareEncumbrance) ?? [])
                    {
                        <ItemStatComparison ComparisonResult=@comp Suffix="%"></ItemStatComparison>
                    }
                </span>
            }
            @if (HighlightedItem?.Value > 0)
            {
                <span style="margin-top: 0.5rem">Value: @HighlightedItem?.Value c</span>
            }
        </div>
    </div>
    @if (IsItemOwned(HighlightedItem))
    {
        @if (EquipButtonVisible)
        {
            <button id="btnEquip" class="itemButton" disabled="@(HighlightedItem == null)" @onclick="ToggleEquip">
                @(IsItemEquipped(HighlightedItem) ? "Unequip" : "Equip")
            </button>
        }
        @if (CoreWrapper.IsFeatureAvailable(GameFeature.Crafting) && RefineButtonVisible)
        {
            @if (MaxQuality)
            {
                <div style="height: 5.5rem; font-size: larger; align-content: center">
                    Maximum Quality
                </div>
            }
            else
            {
                <div>Duration: @($"{HighlightedItem?.Refining.Duration:0} seconds")</div>
                <div>Odds: @($"{CoreWrapper.CalculateRefiningSuccessRate(HighlightedItem?.Quality ?? 0):0%}")</div>
                <button id="btnRefine" class="itemButton" @onclick="RefineItem"
                        disabled="@(HighlightedItem == null || IsItemEquipped(HighlightedItem) || MaxQuality)">
                    @RefineText
                </button>
            }
        }
        @if (SellButtonVisible)
        {
            <button id="btnSell" class="itemButton"
                    disabled="@(HighlightedItem == null || IsItemEquipped(HighlightedItem))" @onclick="SellItem">
                @SellText
            </button>
        }
    }
    else
    {
        @if (CoreWrapper.IsFeatureAvailable(GameFeature.Crafting) && CraftButtonVisible && HighlightedItem != null)
        {
            <div>Duration: @($"{HighlightedItem?.Refining.Duration:0} seconds")</div>
            <button id="btnCraft" class="itemButton" disabled="@(HighlightedItem == null || IsItemOwned(HighlightedItem))" @onclick="CraftItem">
                @CraftText
            </button>
        }
    }

    @if (CoreWrapper.Coins > 0)
    {
        <span id="coins">Purse: @(
        CoreWrapper.Coins
        )c</span>
    }
</div>

<style>
    #highlightedItemContainer {
    flex: 1 1 0px;
    display: flex;
    flex-direction: column;
    align-items: center;
    box-sizing: border-box;
    gap: 5px;
    }

    #highlightedItem {
    flex: 1 1 0px;
    border: 1px solid black;
    width: 80%;
    min-height: 100px;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    padding: 5px;
    box-sizing: border-box;
    }

    #highlightedItemName {
        margin-bottom: 0px;
    }

    #crafted-line {
        font-style: italic;
        color: slategray;
    }

    #description-lines {
        margin-top: 5px;
        display: inherit;
        flex-direction: inherit;
    }

    span.important {
        font-weight: bold;
    }

    #coins {
    /* position: absolute;
    right: 10px;
    bottom: 10px; */
    text-align: right;
    align-self: end;
    }

    button.itemButton {
    min-width: 150px;
    max-width: 50%;
    }
</style>

@code {
    [Parameter]
    public bool EquipButtonVisible { get; set; } = true;
    [Parameter]
    public bool SellButtonVisible { get; set; } = true;
    [Parameter]
    public bool RefineButtonVisible { get; set; } = false;
    [Parameter]
    public bool CraftButtonVisible { get; set; } = false;

    IItemEntity? HighlightedItem => CoreWrapper.GetItem(CoreWrapper.HighlightedItem);

    List<string> ItemDescriptionLines => HighlightedItem?.Description?.Split(';')?.ToList() ?? new();

    uint CharId => CoreWrapper.Character.Id;

    string SellText 
    { 
        get 
        { 
            if (HighlightedItem == null)
            {
                return "Sell";
            }
            else if (HighlightedItem.Value > 0)
            {
                return $"Sell (+{HighlightedItem.Value}c)";
            }
            return "Throw out"; 
        } 
    }

    bool MaxQuality => ((HighlightedItem?.Quality ?? 0) >= ItemKingdom.MaxItemQuality);

    string RefineText => !MaxQuality 
        ? ("Refine" + ((HighlightedItem != null) ? $" (-{HighlightedItem?.Refining.Cost ?? 0}c)" : ""))
        : "Maxed";
    string CraftText => "Craft" + ((HighlightedItem != null) ? $" (-{HighlightedItem?.Refining.Cost ?? 0}c)" : "");

    protected override void OnInitialized()
    {
        CoreWrapper.StateChanged += StateHasChanged;
        base.OnInitialized();
    }

    bool IsItemEquipped(IItemEntity? item)
    {
        if (item == null)
            return false;
        return (CoreWrapper.Equipment.Any(i => i.Id == item.Id));
    }

    bool IsItemOwned(IItemEntity? item)
    {
        if (item == null)
            return false;
        return (IsItemEquipped(item) || CoreWrapper.Inventory.Any(i => i.Id == item.Id));
    }

    void ToggleEquip()
    {
        if (HighlightedItem != null)
        {
            if (IsItemEquipped(HighlightedItem))
            {
                CoreWrapper.InputHandler.UnequipItem(CharId, HighlightedItem.Id);
            }
            else
            {
                CoreWrapper.InputHandler.EquipItem(CharId, HighlightedItem.Id);
            }
        }
    }

    void SellItem()
    {
        if (HighlightedItem != null)
        {
            CoreWrapper.InputHandler.SellItem(CharId, HighlightedItem.Id);
        }
    }

    void RefineItem()
    {
        if (HighlightedItem != null)
        {
            CoreWrapper.InputHandler.RefineItem(CharId, HighlightedItem.Id);
        }
    }

    void CraftItem()
    {
        if (HighlightedItem != null)
        {
            CoreWrapper.InputHandler.CraftItem(CharId, HighlightedItem.Id);
        }
    }
}
