@using TheIdleScrolls_Core
@using TheIdleScrolls_Web.CoreWrapper

@inject CoreWrapperModel CoreWrapper

<div id="highlightedItemContainer">
    <div id="highlightedItem">
        <h5 id="highlightedItemName" class="@(CssUtilities.GetClassesForItem(HighlightedItem))">@HighlightedItem?.Name</h5>
        @foreach (string line in ItemDescriptionLines)
        {
            <span id="highlightedItemDescription">@line</span>
        }
    </div>
    <button id="btnEquip" class="itemButton" disabled="@(HighlightedItem == null)" @onclick="ToggleEquip">
        @(IsItemEquipped(HighlightedItem) ? "Unequip" : "Equip")
    </button>
    <button id="btnSell" class="itemButton" disabled="@(HighlightedItem == null)" @onclick="SellItem">
        @SellText
    </button>
    <button id="btnReforge" class="itemButton" disabled="@(HighlightedItem == null)" @onclick="ReforgeItem">
        @ReforgeText
    </button>
</div>

<style>
    #highlightedItemContainer {
        flex: 1 1 0px;
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 10px;
        gap: 5px;
    }

    #highlightedItem {
        flex: 1 1 0px;
        border: 1px solid black;
        width: 80%;
        display: flex;
        flex-direction: column;
        padding: 5px;
    }

    #highlightedItemName {
        
    }

    button.itemButton {
        min-width: 150px;
        max-width: 50%;
    }
</style>

@code {
    ItemRepresentation? HighlightedItem => CoreWrapper.GetOwnedItem(CoreWrapper.HighlightedItem);

    List<string> ItemDescriptionLines => HighlightedItem?.Description?.Split(';')?.ToList() ?? new();

    uint CharId => CoreWrapper.Character.Id;

    string SellText => "Sell" + ((HighlightedItem != null) ? $" (+{HighlightedItem?.Value}c)" : "");
    string ReforgeText => "Reforge" + ((HighlightedItem != null) ? $" (-{HighlightedItem?.ReforgingCost}c)" : "");

    protected override void OnInitialized()
    {
        CoreWrapper.StateChanged += StateHasChanged;
        base.OnInitialized();
    }

    bool IsItemEquipped(ItemRepresentation? item)
    {
        if (item == null)
            return false;
        return (CoreWrapper.Equipment.Items.Any(i => i.Id == item.Id));
    }

    void ToggleEquip()
    {
        if (HighlightedItem != null)
        {
            if (IsItemEquipped(HighlightedItem))
            {
                CoreWrapper.InputHandler.UnequipItem(CharId, HighlightedItem.Id);
            }
            else
            {
                CoreWrapper.InputHandler.EquipItem(CharId, HighlightedItem.Id);
            }
        }
    }

    void SellItem()
    {
        if (HighlightedItem != null)
        {
            CoreWrapper.InputHandler.SellItem(CharId, HighlightedItem.Id);
        }
    }

    void ReforgeItem()
    {
        if (HighlightedItem != null)
        {
            CoreWrapper.InputHandler.ReforgeItem(CharId, HighlightedItem.Id);
        }
    }
}
