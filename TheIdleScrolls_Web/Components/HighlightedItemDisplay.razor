@using TheIdleScrolls_Core
@using TheIdleScrolls_Web.CoreWrapper

@inject CoreWrapperModel CoreWrapper

<div id="highlightedItemContainer">
    <div id="highlightedItem" style="@(HighlightedItem == null ? "visibility:hidden" : "")">
        <h5 id="highlightedItemName" class="@(CssUtilities.GetClassesForItem(HighlightedItem))">@HighlightedItem?.Name</h5>
        @if (HighlightedItem?.Crafted ?? false)
        {
            <span id="crafted-line">Crafted</span>
        }
        <div id="description-lines">
            @foreach (string line in ItemDescriptionLines)
            {
                <span>@line</span>
            }
        </div>
    </div>
    @if (IsItemOwned(HighlightedItem))
    {
        @if (EquipButtonVisible)
        {
            <button id="btnEquip" class="itemButton" disabled="@(HighlightedItem == null)" @onclick="ToggleEquip">
                @(IsItemEquipped(HighlightedItem) ? "Unequip" : "Equip")
            </button>
        }
        @if (SellButtonVisible)
        {
            <button id="btnSell" class="itemButton" 
                disabled="@(HighlightedItem == null || IsItemEquipped(HighlightedItem))" @onclick="SellItem"
            >
                @SellText
            </button>
        }
        @if (CoreWrapper.IsFeatureAvailable(GameFeature.Crafting) && ReforgeButtonVisible)
        {
            <div>Duration: @($"{HighlightedItem?.Reforging.Duration:0} seconds")</div>
            <div>Odds: @($"{CoreWrapper.CalculateReforgingSuccessRate(HighlightedItem?.Rarity ?? 0):0%}")</div>
            <button id="btnReforge" class="itemButton" disabled="@(HighlightedItem == null || IsItemEquipped(HighlightedItem))" @onclick="ReforgeItem">
                @ReforgeText
            </button>
        }
    }
    @if (CoreWrapper.Coins > 0)
    {
        <span id="coins">Purse: @(
        CoreWrapper.Coins
        )c</span>
    }
</div>

<style>
    #highlightedItemContainer {
    flex: 1 1 0px;
    display: flex;
    flex-direction: column;
    align-items: center;
    box-sizing: border-box;
    gap: 5px;
    }

    #highlightedItem {
    flex: 1 1 0px;
    border: 1px solid black;
    width: 80%;
    min-height: 100px;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    padding: 5px;
    box-sizing: border-box;
    }

    #highlightedItemName {
        margin-bottom: 0px;
    }

    #crafted-line {
        font-style: italic;
        color: slategray;
    }

    #description-lines {
        margin-top: 5px;
        display: inherit;
        flex-direction: inherit;
    }

    #coins {
    position: absolute;
    right: 10px;
    bottom: 10px;
    }

    button.itemButton {
    min-width: 150px;
    max-width: 50%;
    }
</style>

@code {
    [Parameter]
    public bool EquipButtonVisible { get; set; } = true;
    [Parameter]
    public bool SellButtonVisible { get; set; } = true;
    [Parameter]
    public bool ReforgeButtonVisible { get; set; } = true;

    ItemRepresentation? HighlightedItem => CoreWrapper.GetItem(CoreWrapper.HighlightedItem);

    List<string> ItemDescriptionLines => HighlightedItem?.Description?.Split(';')?.ToList() ?? new();

    uint CharId => CoreWrapper.Character.Id;

    string SellText 
    { 
        get 
        { 
            if (HighlightedItem == null)
            {
                return "Sell";
            }
            else if (HighlightedItem.Value > 0)
            {
                return $"Sell (+{HighlightedItem.Value}c)";
            }
            return "Throw out"; 
        } 
    }
    string ReforgeText => "Reforge" + ((HighlightedItem != null) ? $" (-{HighlightedItem?.Reforging.Cost ?? 0}c)" : "");

    protected override void OnInitialized()
    {
        CoreWrapper.StateChanged += StateHasChanged;
        base.OnInitialized();
    }

    bool IsItemEquipped(ItemRepresentation? item)
    {
        if (item == null)
            return false;
        return (CoreWrapper.Equipment.Items.Any(i => i.Id == item.Id));
    }

    bool IsItemOwned(ItemRepresentation? item)
    {
        if (item == null)
            return false;
        return (IsItemEquipped(item) || CoreWrapper.Inventory.Any(i => i.Id == item.Id));
    }

    void ToggleEquip()
    {
        if (HighlightedItem != null)
        {
            if (IsItemEquipped(HighlightedItem))
            {
                CoreWrapper.InputHandler.UnequipItem(CharId, HighlightedItem.Id);
            }
            else
            {
                CoreWrapper.InputHandler.EquipItem(CharId, HighlightedItem.Id);
            }
        }
    }

    void SellItem()
    {
        if (HighlightedItem != null)
        {
            CoreWrapper.InputHandler.SellItem(CharId, HighlightedItem.Id);
        }
    }

    void ReforgeItem()
    {
        if (HighlightedItem != null)
        {
            CoreWrapper.InputHandler.ReforgeItem(CharId, HighlightedItem.Id);
        }
    }
}
