@using TheIdleScrolls_Web.CoreWrapper
@* @using TheIdleScrolls_Web.Assets *@

@inject CoreWrapperModel CoreWrapper

<div class="fightOuter">
    
    @if (MobPresent)
    {
        
         <div id="imageContainer">
             <img class="pixelart" style="width: @(ImageSize)px; border-bottom: 4px solid black"
                 src="@(GetMobImage())" />
        </div>

        <div class="fightInner">
            <p style="margin-bottom: 0px;">@CoreWrapper.Mob.Name (Level @CoreWrapper.Mob.Level)</p>
            <div class="progressFrame">
                <div class="progressFill healthBar" style="width: @(PctString(Hp, HpMax));"></div>
            </div>
            <p class="healthText">HP: @Hp.ToBigIntString() / @HpMax.ToBigIntString()</p>
        </div>
    }
    
    @if (TimeActive)
    {
        <div class="fightInner" style="margin-top: 1rem;">
            <p class="timeText">Time Limit</p>
            <div class="progressFrame">
                <div class="progressFill timeBar" style="width: @(PctString(Time, TimeMax));"></div>
            </div>
            <p class="timeText">Remaining: @(GetTimeString(Time)) / @(GetTimeString(TimeMax))</p>
        </div>
    }

    <div class="progress-bar-container" style="margin-top: 1rem;">
        Atk
        <div id="attack-bar-frame" class="progressFrame" style="justify-content: start">
            <div id="attack-bar-fill" class="progressFill" style="width: @($"{AttackPct:0%}");"></div>
        </div>
    </div>
    
</div>

<style>
    #imageContainer {
        width: 100%;
        padding: 0.5rem;
        display: flex;
        flex-direction: row;
        justify-content: center;
    }

    div.fightOuter {
        width: 100%;
        display: flex;
        flex-direction: column;
        padding: 0.5rem;
        background-color: var(--back-color);
    }

    div.fightInner {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .timeBar {
        background-color: var(--color-time);
    }

    .timeText {
        color: var(--color-time);
        margin-bottom: 0px;
    }

    .healthBar {
        background-color: var(--color-hp);
    }

    .healthText {
        color: var(--color-hp);
        margin-bottom: 0px;
    }

    .progress-bar-container {
        display: inline-flex;
        gap: 0.5rem;
        font-size: 1.25rem;
    }

    #attack-bar-frame {
        width: 100%;
        border: 1px solid var(--frame-color);
        background: inherit;
        height: fit-content;
        align-self: center;
    }

    #attack-bar-fill {
        background-color: var(--color-attack-progress);
        height: 12px;
    }
</style>

@code {
    bool MobPresent => CoreWrapper.Mob.HpMax > 0;
    bool TimeActive => CoreWrapper.TimeLimit.Maximum > 0 && CoreWrapper.Mob.Damage > 0.0;

    bool BigImage => CurrentMobImage.Length > 1000;
    int ImageSize => BigImage ? 256 : 128;

    int Hp => CoreWrapper.Mob.HP;
    int HpMax => CoreWrapper.Mob.HpMax;
    double Time => CoreWrapper.TimeLimit.Remaining;
    double TimeMax => CoreWrapper.TimeLimit.Maximum;

    double AttackPct => 1.0 - 1.0 * CoreWrapper.CharacterStats.CooldownRemaining / CoreWrapper.CharacterStats.Cooldown;

    string CurrentMobId = "";
    string CurrentMobImage = "";

    protected override void OnInitialized()
    {
        CoreWrapper.StateChanged += StateHasChanged;
        base.OnInitialized();
    }

    string GetTimeString(double time)
    {
        return $"{time:0.###} s";
    }

    string PctString(double current, double max)
    {
        return $"{current / max:0%}";
    }

    int TimeToInt(double time)
    {
        return (int)(time * 1000);
    }

    string GetMobImage()
    {
        string mob = CoreWrapper.Mob.Id.ToLower();
        if (mob == CurrentMobId)
        {
            return CurrentMobImage;
        }

        CurrentMobId = mob;
        object? mobImage = Assets.Mobs.ResourceManager.GetObject(mob) 
                            ?? Assets.Mobs.ResourceManager.GetObject("_default");
        if (mobImage != null)
        {
            string base64 = Convert.ToBase64String((byte[])mobImage);
            CurrentMobImage = $"data:image/png; base64,{base64}";

            Console.WriteLine($"Loaded image binary size: {base64.Length}");
        }
        else
        {
            CurrentMobImage = "/images/hourglass_broadsword.png";
        }
        return CurrentMobImage;
    }
}
