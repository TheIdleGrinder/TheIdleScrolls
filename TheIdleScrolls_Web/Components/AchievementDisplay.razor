@using TheIdleScrolls_Web.CoreWrapper
@using TheIdleScrolls_Core

@implements IDisposable

@inject CoreWrapperModel CoreWrapper

<div class="ach-container">

    <div class="ach-list">
        @foreach (var achievement in Achievements.Where(a => !HideEarned || !a.Earned))
        {
            <div class="achievement @(GetAchievementClasses(achievement))">
                <div class="ach-title">@achievement.Title</div>
                <div class="ach-description">@achievement.Description</div>
                @if (achievement.Reward != string.Empty)
                {
                    <div class="ach-reward">➤ Reward: @achievement.Reward</div>
                }
            </div>
        }
    </div>

    <div class="ach-header">
        <p style="margin-bottom: 0">Completed: @AchievementsEarned / @TotalAchievements</p>
        <div>
            <label>Hide completed</label>
            <input type="checkbox" checked="@HideEarned" @onclick="(() => HideEarned = !HideEarned)" />
        </div>
    </div>

    @if (NewAchievements > 0)
    {
        <div class="ach-new-indicator">
            @NewAchievements newly earned!
        </div>
    }
</div>

<style>
    .ach-container {
        padding: 0;
        max-height: 100%;
        display: flex;
        flex-direction: column;
        overflow-y: auto;
    }

    .ach-header {
        display: flex;
        flex-direction: row;
        align-items: center;
        flex: 0 0 auto;
        margin: 0;
        padding: 1rem;
        border-top: 2px solid var(--frame-color);
        justify-content: space-between;
    }

    .ach-list {
        display: flex;
        flex-direction: column;
        flex: 1 1 auto;
        max-height: 100%;
        overflow-y: auto;
        margin: 0;
        padding: 5px;
    }

    .ach-new-indicator {
        position: absolute;
        top: 1rem;
        left: 50%;
        transform: translateX(-50%);
        padding: 5px;
        background-color: palegreen;
        border: 2px solid mediumseagreen;
        color: black;
        font-weight: bold;
        text-align: center;
    }

    .achievement {
        margin: 5px;
        padding: 5px;
        /* width: 70%; */
        border: 1px solid var(--frame-color);
    }

    .ach-earned {
        color: black;
        background-color: var(--back-color-special);
    }

    .ach-unearned {
        color: gray;
        font-style: italic;
        background-color: white;
    }

    .ach-new {
        border-width: 3px;
    }

    .ach-new.ach-earned {
        border-color: mediumseagreen;
    }

    .ach-new.ach-unearned {
        border-color: limegreen;
    }

    .ach-title {
        font-weight: bold;
    }

    .ach-description {
        margin: 2px;
        margin-left: 5px;
    }

    .ach-reward {
        margin: 2px;
        margin-left: 5px;
    }
</style>

@code {
    List<AchievementRepresentation> Achievements => CoreWrapper.Achievements;
    int TotalAchievements => CoreWrapper.AchievementCount;
    int AchievementsEarned => Achievements.Count(a => a.Earned);
    bool HideEarned { get; set; } = false;

    List<string> SeenEarnedAchievements {get; set;} = new List<string>();
    int NewAchievements => AchievementsEarned - SeenEarnedAchievements.Count;

    AchievementsChangedHandler AchChangedHandler => (List<AchievementRepresentation> achievements, int count) =>
    {
        CoreWrapper.SeenEarnedAchievements = achievements.Where(a => a.Earned).Select(a => a.Title).ToList();
        StateHasChanged();
    };

    protected override void OnInitialized()
    {
        CoreWrapper.GameRunner.GetEventEmitter().AchievementsChanged += AchChangedHandler;

        CoreWrapper.StateChanged += StateHasChanged;
        base.OnInitialized();

        SeenEarnedAchievements = new List<string>(CoreWrapper.SeenEarnedAchievements);
        CoreWrapper.SeenEarnedAchievements = Achievements.Where(a => a.Earned).Select(a => a.Title).ToList();
    }

    void IDisposable.Dispose()
    {
        CoreWrapper.GameRunner.GetEventEmitter().AchievementsChanged -= AchChangedHandler;
    }

    private string GetAchievementClasses(AchievementRepresentation achievement)
    {
        string classes = "achievement ";
        classes += achievement.Earned ? "ach-earned" : "ach-unearned";

        if (achievement.Earned && !SeenEarnedAchievements.Contains(achievement.Title))
        {
            classes += " ach-new";
        }

        return classes;
    }
}