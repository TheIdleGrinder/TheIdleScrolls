@using TheIdleScrolls_Core
@using TheIdleScrolls_Web.CoreWrapper

@inject CoreWrapperModel CoreWrapper

<div class="equipFrame">
    <div class="equipLine">
        <p class="equipSlot @GetClassesForItem(ExactEquipSlot.Head)" @onclick=@(() => UnequipItem(ExactEquipSlot.Head))>
            @GetItemName(ExactEquipSlot.Head, "Head")
        </p>
    </div>
    <div class="equipLine">
        <p class="equipSlot @GetClassesForItem(ExactEquipSlot.MainHand)" @onclick=@(() => UnequipItem(ExactEquipSlot.MainHand))>
           @GetItemName(ExactEquipSlot.MainHand, "Hand")
        </p>
        <p class="equipSlot @GetClassesForItem(ExactEquipSlot.Chest)" @onclick=@(() => UnequipItem(ExactEquipSlot.Chest))>
            @GetItemName(ExactEquipSlot.Chest, "Chest")
        </p>
        <p class="equipSlot @GetClassesForItem(ExactEquipSlot.OffHand)" @onclick=@(() => UnequipItem(ExactEquipSlot.OffHand))>
            @GetItemName(ExactEquipSlot.OffHand, "Hand")
        </p>
    </div>
    <div class="equipLine">
        <p class="equipSlot @GetClassesForItem(ExactEquipSlot.Arms)" @onclick=@(() => UnequipItem(ExactEquipSlot.Arms))>
            @GetItemName(ExactEquipSlot.Arms, "Arms")
        </p>
        <p class="equipSlot @GetClassesForItem(ExactEquipSlot.Legs)" @onclick=@(() => UnequipItem(ExactEquipSlot.Legs))>
            @GetItemName(ExactEquipSlot.Legs, "Legs")
        </p>
    </div>
</div>

@code {
    protected override void OnInitialized()
    {
        CoreWrapper.StateChanged += StateHasChanged;
        base.OnInitialized();
    }

    ItemRepresentation? GetItem(ExactEquipSlot slot) => CoreWrapper.Equipment.GetItem(slot);
    string GetItemName(ItemRepresentation? item, string _default) => (item != null) ? item.Name : _default;
    string GetItemName(ExactEquipSlot slot, string _default) => GetItemName(GetItem(slot), _default);

    string GetClassesForItem(ExactEquipSlot slot) => CssUtilities.GetClassesForItem(GetItem(slot));

    void UnequipItem(ExactEquipSlot slot)
    {
        var item = GetItem(slot);
        if (item != null)
        {
            CoreWrapper.InputHandler.UnequipItem(CoreWrapper.Character.Id, item.Id);
        }
    }
}