@using TheIdleScrolls_Web.CoreWrapper

@inject CoreWrapperModel CoreWrapper

<div class="main-frame">
    <div class="left-frame" style="height: 600px">
        <CurrentAreaSelector></CurrentAreaSelector>
        <FightStateIndicator></FightStateIndicator>
    </div>
    <div class="right-frame">
        <CharacterOverview></CharacterOverview>
        <div class="tabs" style="margin-top: 10px">
            <button class="tablinks @AddTabClass(Tab.Travel)" @onclick="@(() => SetTab(Tab.Travel))">Travel</button>
            @if (CoreWrapper.IsFeatureAvailable(TheIdleScrolls_Core.GameFeature.Inventory))
            {
                <button class="tablinks @AddTabClass(Tab.Inventory)" @onclick="@(() => SetTab(Tab.Inventory))">Inventory</button>
            }
            @if (CoreWrapper.IsFeatureAvailable(TheIdleScrolls_Core.GameFeature.Abilities))
            {
                <button class="tablinks @AddTabClass(Tab.Abilities)" @onclick="@(() => SetTab(Tab.Abilities))">Abilities</button>
            }
            <button class="tablinks @AddTabClass(Tab.Achievements)" @onclick="@(() => SetTab(Tab.Achievements))">Achievements</button>
            <button class="tablinks @AddTabClass(Tab.Stats)" @onclick="@(() => SetTab(Tab.Stats))">Stats</button>
        </div>
        <div id="tabbedContainer">
            @if (m_activeTab == Tab.Travel)
            {
                <DungeonSelector></DungeonSelector>
            }
            @if (m_activeTab == Tab.Inventory)
            {
                <div class="spaced-items">
                    <div style="flex: 0 0 auto; height: 175px">
                        <EquipmentDisplay></EquipmentDisplay>
                    </div>
                    <div style="display: flex; flex-direction: row; flex: 1 1 auto; max-height: inherit">
                        <InventoryDisplay></InventoryDisplay>
                        <HighlightedItemDisplay></HighlightedItemDisplay>
                    </div>
                </div>
            }
            @if (m_activeTab == Tab.Abilities)
            {
                <AbilitiesDisplay></AbilitiesDisplay>
            }
            @if (m_activeTab == Tab.Achievements)
            {
                <AchievementDisplay></AchievementDisplay>
            }
            @if (m_activeTab == Tab.Stats)
            {
                <StatisticsDisplay></StatisticsDisplay>
            }
        </div>
    </div>
</div>

<style>
    :root {
        --text-color: black;
        --back-color: white;
        --frame-color: slategray;
    }

    #tabbedContainer {
        flex: 1 1 auto;
        width: 100%;
        max-height: 600px;
        border: 2px dotted purple;
    }
</style>

@code {
    enum Tab { Travel, Inventory, Abilities, Achievements, Stats };

    Tab m_activeTab = Tab.Travel;

    protected override void OnInitialized()
    {
        CoreWrapper.StateChanged += StateHasChanged;
        base.OnInitialized();
    }

    void SetTab(Tab tab)
    {
        m_activeTab = tab;
    }

    string AddTabClass(Tab tab)
    {
        return (m_activeTab == tab) ? " active" : "";
    }
}