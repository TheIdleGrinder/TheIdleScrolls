@using TheIdleScrolls_Web.CoreWrapper

@inject CoreWrapperModel CoreWrapper

<div class="main-frame">
    <div class="left-frame play-area-frame" >
        <CurrentAreaSelector></CurrentAreaSelector>
        <hr class="thick">
        <FightStateIndicator></FightStateIndicator>
    </div>
    <div class="right-frame">
        <div id="charOverview" class="play-area-frame">
            <CharacterOverview></CharacterOverview>
        </div>
        <div class="tabs play-area-frame-top">
            @if (CoreWrapper.IsFeatureAvailable(TheIdleScrolls_Core.GameFeature.Travel))
            {
                <button class="tablinks @AddTabClass(Tab.Travel)" @onclick="@(() => SetTab(Tab.Travel))">Travel</button>
            }
            @if (CoreWrapper.IsFeatureAvailable(TheIdleScrolls_Core.GameFeature.Inventory))
            {
                <button class="tablinks @AddTabClass(Tab.Inventory)" @onclick="@(() => SetTab(Tab.Inventory))">Inventory</button>
            }
            @if (CoreWrapper.IsFeatureAvailable(TheIdleScrolls_Core.GameFeature.Crafting))
            {
                <button class="tablinks @AddTabClass(Tab.Crafting)" @onclick="@(() => SetTab(Tab.Crafting))">Crafting</button>
            }
            @if (CoreWrapper.IsFeatureAvailable(TheIdleScrolls_Core.GameFeature.Abilities))
            {
                <button class="tablinks @AddTabClass(Tab.Abilities)" @onclick="@(() => SetTab(Tab.Abilities))">Abilities</button>
            }
            @if (CoreWrapper.IsFeatureAvailable(TheIdleScrolls_Core.GameFeature.Perks))
            {
                <button class="tablinks @AddTabClass(Tab.Perks)" @onclick="@(() => SetTab(Tab.Perks))">Perks</button>
            }
            <button class="tablinks @AddTabClass(Tab.Achievements)" @onclick="@(() => SetTab(Tab.Achievements))">Achievements</button>
            <button class="tablinks @AddTabClass(Tab.Stats)" @onclick="@(() => SetTab(Tab.Stats))">Stats</button>
            <button class="tablinks @AddTabClass(Tab.Help)" @onclick="@(() => SetTab(Tab.Help))">Help</button>
        </div>
        <div id="tabbedContainer" class="play-area-frame-bottom">
            @if (m_activeTab == Tab.Travel)
            {
                <div id="travelPage">
                    <div style="display: flex; flex-direction: column; max-height: 100%; overflow-y: auto">
@*                        @for (int i = 5; i < CoreWrapper.Accessible.MaxWilderness; i += 5)
                        {
                            int level = i;
                            <button @onclick=@(() => CoreWrapper.InputHandler.TravelIntoWilderness(level))>
                                Wilderness @i
                            </button>
                        }
                        <button @onclick=@(() => CoreWrapper.InputHandler.TravelIntoWilderness(CoreWrapper.Accessible.MaxWilderness))>
                            Wilderness @CoreWrapper.Accessible.MaxWilderness
                        </button>*@
                    </div>
                    <DungeonSelector></DungeonSelector>
                </div>
            }
            @if (m_activeTab == Tab.Inventory)
            {
                <div id="inventoryPage" class="outer">
                    <div id="equipmentArea">
                        <EquipmentDisplay></EquipmentDisplay>
                    </div>
                    <hr class="thick">
                    <div id="inventoryArea">
                        <InventoryDisplay Title="Inventory" Items=@CoreWrapper.Inventory></InventoryDisplay>
                        <HighlightedItemDisplay ReforgeButtonVisible="false"></HighlightedItemDisplay>
                    </div>
                </div>
            }
            @if (m_activeTab == Tab.Crafting)
            {
                 <div class="tabPage" id="craftingPage">
                    <CraftingDisplay></CraftingDisplay>
                </div>
            }
            @if (m_activeTab == Tab.Abilities)
            {
                <AbilitiesDisplay></AbilitiesDisplay>
            }
            @if (m_activeTab == Tab.Perks)
            {
                <PerksDisplay></PerksDisplay>
            }
            @if (m_activeTab == Tab.Achievements)
            {
                <AchievementDisplay></AchievementDisplay>
            }
            @if (m_activeTab == Tab.Stats)
            {
                <StatisticsDisplay></StatisticsDisplay>
            }
            @if (m_activeTab == Tab.Help)
            {
                <HelpDisplay></HelpDisplay>
            }
        </div>
    </div>
    @if (CoreWrapper.DialogueMessages.Count > 0)
    {
        <DialogueDisplay></DialogueDisplay>
    }

</div>

<style>
    #tabbedContainer {
        max-height: 100%;
        width: 100%;
        grid-area: tabbed-area;
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        /*border: 1px solid var(--frame-color);*/
        /*background-color: var(--back-color);*/
        /*border-top: none;*/
    }

    #travelPage {
        display: grid;
        grid-template-columns: 1fr 2fr;
        position: absolute;
        width: 100%;
        max-height: 100%;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
    }

    #inventoryPage {
        display: grid;
        grid-template-rows: min-content min-content auto;
        grid-template-areas:
            "equipment"
            "splitter"
            "inventory";
        position: relative;
        width: 100%;
        max-height: 100%;
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
    }

    #equipmentArea {
        grid-area: equipment;
    }

    #inventoryArea {
        grid-area: inventory;
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        max-height: 100%;
        width: 100%;
        display: grid;
        padding: 10px;
        padding-top: 0px;
        grid-template-columns: 1fr 1fr;
    }

    .tabPage {
        width: 100%;
        max-height: 100%;
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
    }

    #craftingPage {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
/*         justify-content: center;
        align-items: center; */
    }
</style>

@code {
    enum Tab { Travel, Inventory, Crafting, Abilities, Achievements, Stats, Help, Perks };

    Tab m_activeTab = Tab.Achievements;

    protected override void OnInitialized()
    {
        CoreWrapper.StateChanged += StateHasChanged;
        base.OnInitialized();
    }

    void SetTab(Tab tab)
    {
        m_activeTab = tab;
    }

    string AddTabClass(Tab tab)
    {
        return (m_activeTab == tab) ? " active" : "";
    }
}