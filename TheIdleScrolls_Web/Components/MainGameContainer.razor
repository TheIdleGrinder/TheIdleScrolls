@using TheIdleScrolls_Web.CoreWrapper

@inject CoreWrapperModel CoreWrapper

<div class="main-frame">
    <div class="left-frame" >
        <CurrentAreaSelector></CurrentAreaSelector>
        <FightStateIndicator></FightStateIndicator>
    </div>
    <div class="right-frame">
        <div id="charOverview">
            <CharacterOverview></CharacterOverview>
        </div>
        <div class="tabs">
            <button class="tablinks @AddTabClass(Tab.Travel)" @onclick="@(() => SetTab(Tab.Travel))">Travel</button>
            @if (CoreWrapper.IsFeatureAvailable(TheIdleScrolls_Core.GameFeature.Inventory))
            {
                <button class="tablinks @AddTabClass(Tab.Inventory)" @onclick="@(() => SetTab(Tab.Inventory))">Inventory</button>
            }
            @if (CoreWrapper.IsFeatureAvailable(TheIdleScrolls_Core.GameFeature.Abilities))
            {
                <button class="tablinks @AddTabClass(Tab.Abilities)" @onclick="@(() => SetTab(Tab.Abilities))">Abilities</button>
            }
            <button class="tablinks @AddTabClass(Tab.Achievements)" @onclick="@(() => SetTab(Tab.Achievements))">Achievements</button>
            <button class="tablinks @AddTabClass(Tab.Stats)" @onclick="@(() => SetTab(Tab.Stats))">Stats</button>
        </div>
        <div id="tabbedContainer">
            @if (m_activeTab == Tab.Travel)
            {
                <DungeonSelector></DungeonSelector>
            }
            @if (m_activeTab == Tab.Inventory)
            {
                <div id="inventoryPage">
                    <div id="equipmentArea">
                        <EquipmentDisplay></EquipmentDisplay>
                    </div>
                    <hr class="thick">
                    <div id="inventoryArea">
                        <InventoryDisplay></InventoryDisplay>
                        <HighlightedItemDisplay></HighlightedItemDisplay>
                    </div>
                </div>
            }
            @if (m_activeTab == Tab.Abilities)
            {
                <AbilitiesDisplay></AbilitiesDisplay>
            }
            @if (m_activeTab == Tab.Achievements)
            {
                <AchievementDisplay></AchievementDisplay>
            }
            @if (m_activeTab == Tab.Stats)
            {
                <StatisticsDisplay></StatisticsDisplay>
            }
        </div>
    </div>
    @if (CoreWrapper.TitledMessages.Count > 0)
    {
        <div id="bigMessageArea">
            @if (CoreWrapper.TitledMessages[0].Title != string.Empty)
            {
                <h4>@CoreWrapper.TitledMessages[0].Title</h4>
            }
            <div style="display:flex; flex-direction:inherit">
                @foreach (string line in CoreWrapper.TitledMessages[0].Message.Split('\n'))
                {
                    <span>@line</span>
                }
            </div>
            <button @onclick="@CoreWrapper.MarkTopMessageAsRead" style="width: 100px;">
                Ok
            </button>
        </div>
    }
    <div id="timedMessageArea">
        @foreach (var message in CoreWrapper.ExpiringMessages.Where(m => !m.Expired))
        {
            <div class="timed-message">
                @message.Message
            </div>
        }
    </div>
</div>

<style>
    #tabbedContainer {
        max-height: 100%;
        width: 100%;
        grid-area: tabbed-area;
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        border: 1px solid var(--frame-color);
        background-color: var(--back-color);
    }

    #inventoryPage {
        display: grid;
        grid-template-rows: min-content min-content auto;
        grid-template-areas:
            "equipment"
            "splitter"
            "inventory";
        position: relative;
        width: 100%;
        max-height: 100%;
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
    }

    #equipmentArea {
        grid-area: equipment;
    }

    #inventoryArea {
        grid-area: inventory;
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        max-height: 100%;
        width: 100%;
        display: grid;
        padding: 10px;
        padding-top: 0px;
        grid-template-columns: 1fr 1fr;
    }

    #bigMessageArea {
        position:absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        height: 50%;
        width: 50%;
        display: flex;
        flex-direction: column;
        justify-content: space-evenly;
        align-items: center;
        background-color: var(--back-color-special);
        border: 5px solid var(--frame-color);
        padding: 20px;
    }

    #timedMessageArea {
        position: absolute;
        right: 0;
        top: 0;
        display: flex;
        flex-direction: column;
        width: 20vw;
        margin: 20px;
        gap: 10px;
    }

    div.timed-message {
        background-color: var(--back-color-special);
        border: 2px solid var(--frame-color-special);
        width: 100%;
        padding: 5px;
        overflow-x: hidden;
    }
</style>

@code {
    enum Tab { Travel, Inventory, Abilities, Achievements, Stats };

    Tab m_activeTab = Tab.Travel;

    protected override void OnInitialized()
    {
        CoreWrapper.StateChanged += StateHasChanged;
        base.OnInitialized();
    }

    void SetTab(Tab tab)
    {
        m_activeTab = tab;
    }

    string AddTabClass(Tab tab)
    {
        return (m_activeTab == tab) ? " active" : "";
    }
}