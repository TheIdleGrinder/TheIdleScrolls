@using TheIdleScrolls_Core
@using TheIdleScrolls_Web.CoreWrapper

@inject CoreWrapperModel CoreWrapper

<div class="outer">
    <div id="dungeonButtonsArea">
        @foreach (var dungeon in Dungeons.Where(d => d.Levels.Length > 0))
        {
            <button class="dungeon @CssUtilities.GetClassesForDungeon(dungeon)" @onclick="@(() => SelectDungeon(dungeon))">
                @dungeon.Name
            </button>
        }        
    </div>
    <div id="dungeonDescriptionArea">
        <div id="dungeonDescription">
            @if (SelectedDungeon != null)
            {
                <h5 id="headline">@SelectedDungeon!.Name</h5>
                <h6 id="dungeonLevel">Level @SelectedLevel</h6>
                @foreach (string line in SelectedDungeon!.Description.Split('\n'))
                {
                    <span>@line</span>
                }
            }
        </div>
        <button class="enter" @onclick="EnterDungeon">Enter!</button>
    </div>
</div>

@code {
    List<DungeonRepresentation> Dungeons => CoreWrapper.Accessible.Dungeons;

    DungeonRepresentation? SelectedDungeon = null;
    int SelectedLevel = 0;
    int MinLevel = 0;
    int MaxLevel = 0;

    protected override void OnInitialized()
    {
        CoreWrapper.StateChanged += StateHasChanged;
        base.OnInitialized();
    }

    void SelectDungeon(DungeonRepresentation dungeon)
    {
        SelectedDungeon = dungeon;
        MinLevel = dungeon.Levels.Min();
        MaxLevel = dungeon.Levels.Max();
        SelectedLevel = MaxLevel;
    }

    void EnterDungeon()
    {
        if (SelectedDungeon != null)
            CoreWrapper.InputHandler.EnterDungeon(SelectedDungeon.Id, SelectedLevel);
    }
}