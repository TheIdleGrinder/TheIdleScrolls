@using TheIdleScrolls_Core
@using TheIdleScrolls_Web.CoreWrapper

@inject CoreWrapperModel CoreWrapper

<div id="crafting-display-outer" class="wrapper">
    <h5 style="grid-column:1/3">Active Crafts (@CoreWrapper.Crafts.Count/1)</h5>
    
    <div id="active-crafts">
        @foreach (var craft in CoreWrapper.Crafts)
        {
            <CraftingProcessComponent Craft=@craft></CraftingProcessComponent>
        }
    </div>
    
    <hr class="thick" style="grid-column:1/3">

    <div id="crafting-mode-buttons" class="tabs">
        <button class="tablinks" @onclick="@(() => CoreWrapper.AddExpiringMessage("Craft"))">Craft</button>
        <button class="tablinks" @onclick="@(() => CoreWrapper.AddExpiringMessage("Reforge"))">Reforge</button>
    </div>

    <div id="crafting-item-list" class="wrapper">
        <InventoryDisplay Title="Inventory" Items=@CoreWrapper.Inventory></InventoryDisplay>
    </div>

    <div id="crafting-highlighted-item" class="wrapper">
        <HighlightedItemDisplay EquipButtonVisible="false" SellButtonVisible="false"></HighlightedItemDisplay>
    </div>
</div>

<style>
#crafting-display-outer {
    display: grid;
    grid-template-rows: repeat(4, min-content) auto;
    grid-template-columns: 1fr 1fr;
    padding: 0.5em;
/*     grid-template-areas:
        "active-crafts"
        "crafts"
        "splitter"
        "inventory"; */
}

div.wrapper {
    width: 100%;
    max-height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
}

#active-crafts {
    grid-column: 1 / 3;
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    overflow-x:auto;
    gap: 0px;
    justify-content: start;
}

#crafting-mode-buttons {
    grid-column: 1 / 2;
    grid-row: 4 / 5;
    border: 1px solid var(--frame-color);
}

#crafting-item-list {
    grid-column: 1 / 2;
    grid-row: 5 / 6;
}

#crafting-highlighted-item {
    grid-column: 2 / 3;
    grid-row: 4 / 6;
    display: flex;
}

#crafting-lower {
    grid-area: inventory;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    max-height: 100%;
    width: 100%;
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-areas: "left right";
}

#crafting-lower-left {
    position: absolute;
    grid-area: left;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    max-height: 100%;
    width: 100%;
    display: grid;
    grid-template-rows: min-content 1fr;
    grid-template-areas: 
        "tabs"
        "items"
}

#crafting-lower-right {
    position: absolute;
    grid-area: right;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    max-height: 100%;
    width: 100%;
    display: grid;
    grid-template-rows: 1fr;
}

</style>

@code {
    protected override void OnInitialized()
    {
        CoreWrapper.StateChanged += StateHasChanged;
        base.OnInitialized();
    }
}
