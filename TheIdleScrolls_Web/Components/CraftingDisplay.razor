@using TheIdleScrolls_Core
@using TheIdleScrolls_Web.CoreWrapper

@inject CoreWrapperModel CoreWrapper

<div id="crafting-display-outer" class="wrapper">
    <h5 style="grid-column:1/3">Active Crafts (@CoreWrapper.Crafts.Count/1)</h5>
    
    <div id="active-crafts">
        @foreach (var craft in CoreWrapper.Crafts)
        {
            <CraftingProcessComponent Craft=@craft></CraftingProcessComponent>
        }
    </div>
    
    <hr class="thick" style="grid-column:1/3">

    <div id="crafting-mode-buttons" class="tabs">
@*         <button class="tablinks @GetTabButtonClasses(CraftingMode.Craft)" 
            @onclick="@(() => Mode = CraftingMode.Craft)">Craft
        </button> *@
        <button class="tablinks @GetTabButtonClasses(CraftingMode.Reforge)"  
            @onclick="@(() => Mode = CraftingMode.Reforge)">Reforge
        </button>
    </div>

    <div id="crafting-item-list" class="wrapper">
        <InventoryDisplay 
            Title="@(Mode == CraftingMode.Craft ? "Craftable" : "Inventory")" 
            Items=@GetItemsForMode()>
        </InventoryDisplay>
    </div>

    <div id="crafting-highlighted-item" class="wrapper">
        <HighlightedItemDisplay 
            EquipButtonVisible="false" 
            SellButtonVisible="false"
            ReforgeButtonVisible="@(Mode == CraftingMode.Reforge)"
        >
        </HighlightedItemDisplay>
    </div>
</div>

<style>
#crafting-display-outer {
    display: grid;
    grid-template-rows: repeat(4, min-content) auto;
    grid-template-columns: 1fr 1fr;
    padding: 0.5em;
}

div.wrapper {
    width: 100%;
    max-height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
}

#active-crafts {
    grid-column: 1 / 3;
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    overflow-x:auto;
    gap: 0px;
    justify-content: start;
}

#crafting-mode-buttons {
    grid-column: 1 / 2;
    grid-row: 4 / 5;
    border: 1px solid var(--frame-color);
}

#crafting-item-list {
    grid-column: 1 / 2;
    grid-row: 5 / 6;
    display: flex;
}

#crafting-highlighted-item {
    grid-column: 2 / 3;
    grid-row: 4 / 6;
    display: flex;
}

</style>

@code {
    enum CraftingMode { Craft, Reforge }

    CraftingMode Mode = CraftingMode.Reforge;

    private string GetTabButtonClasses(CraftingMode mode) => mode == Mode ? "active" : "";

    private List<ItemRepresentation> GetItemsForMode()
    {
        return Mode switch
        {
            CraftingMode.Craft => new(),
            CraftingMode.Reforge => CoreWrapper.Inventory,
            _ => throw new NotImplementedException()
        };
    }

    protected override void OnInitialized()
    {
        CoreWrapper.StateChanged += StateHasChanged;
        base.OnInitialized();
    }
}
