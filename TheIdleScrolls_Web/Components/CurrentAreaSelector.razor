@using TheIdleScrolls_Web.CoreWrapper

@inject CoreWrapperModel CoreWrapper

<div class="outer">
    <div id="area-and-arrows">
        <button id="btnPrevArea" class="@(GetArrowClass())" disabled=@IsAtMin @onclick="MoveDown">⮜</button>
        <h3>@CoreWrapper.Area.Name</h3>
        <button id="btnNextArea" class="@(GetArrowClass())" disabled=@IsAtMax @onclick="MoveUp">⮞</button>
    </div>
    
    <div id="dungeon-button">
        <button id="btnLeave" class="@(GetLeaveButtonClass())" @onclick=@(() => CoreWrapper.InputHandler.LeaveDungeon())>Leave</button>
    </div>

    @if (CanTravel && !InDungeon)
    {
        <div id="proceed-button">
            <label>Proceed when possible</label>
            <input type="checkbox" checked="@CoreWrapper.AutoProceedActive" @onclick="ToggleAutoProceed"/>        
        </div>
    }
</div>

<style>
    div.outer {
        position: relative;
        width: 100%;
        display: flex;
        flex-direction: column;
        padding: 5px;
        border: dashed 1px black;
        background-color: var(--back-color);
        flex: 0 0 auto;
    }

    #btnPrevArea {

    }

    #btnNextArea {
        
    }

    #proceed-button {
        position: absolute;
        display: flex;
        flex-direction: row;
        bottom: 10px;
        right: 10px;
        gap: 10px;
    }

    #area-and-arrows {
        width: 100%;
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }

    #dungeon-button {
        width: inherit;
        display: flex;
        justify-content: center;
    }

    div.inner {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    button {
        min-width: 50px;
        min-height: 30px;
    }

    .hidden {
        visibility: hidden;
    }

    #btnLeave {
        padding: 5px 10% 5px 10%;
        max-width: 200px;
    }

</style>

@code {
    int AreaLevel => CoreWrapper.Area.Level;
    bool InDungeon => CoreWrapper.Area.IsDungeon;
    bool CanTravel => CoreWrapper.IsFeatureAvailable(TheIdleScrolls_Core.GameFeature.Travel);

    bool IsAtMin => AreaLevel == 1;
    bool IsAtMax => AreaLevel >= CoreWrapper.Accessible.MaxWilderness;

    protected override void OnInitialized()
    {
        CoreWrapper.StateChanged += StateHasChanged;
        base.OnInitialized();
    }

    private void MoveDown()
    {
        CoreWrapper.InputHandler.TravelIntoWilderness(AreaLevel - 1);
    }

    private void MoveUp()
    {
        CoreWrapper.InputHandler.TravelIntoWilderness(AreaLevel + 1);
    }

    private void ToggleAutoProceed()
    {
        CoreWrapper.InputHandler.SetAutoProceed(!CoreWrapper.AutoProceedActive);
    }

    private string GetArrowClass()
    {
        if (InDungeon || !CanTravel)
        {
            return "hidden";
        }
        return string.Empty;
    }

    private string GetLeaveButtonClass()
    {
        if (!InDungeon)
        {
            return "hidden";
        }
        return string.Empty;
    }
}
