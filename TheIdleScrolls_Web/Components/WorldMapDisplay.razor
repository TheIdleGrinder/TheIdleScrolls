@page "/map"
@using TheIdleScrolls_Core.GameWorld
@using TheIdleScrolls_Web.CoreWrapper

@inject CoreWrapperModel CoreWrapper

<h3>World Map Display</h3>

<div id="worldMapFrame">
    @for (int y = 0; y < Cells.GetLength(0); y++)
    {
        <div class="worldMapRow">
            @for (int x = 0; x < Cells.GetLength(1); x++)
            {
                <div class="worldMapCell" style=@GetCellStyle(Cells[y, x])>@(Cells[y, x]?.Level ?? 0)</div>
            }            
        </div>
    }
</div>

<style>
    :root {
        --color-biome-dungeon: slategray;
        --color-biome-grassland: lawngreen;
        --color-biome-forest: green;
        --color-biome-rainforest: darkgreen;
        --color-biome-swamp: olive;
        --color-biome-savannah: goldenrod;
        --color-biome-desert: yellow;
        --color-biome-oasis: springgreen;
        --color-biome-tundra: teal;
        --color-biome-icydesert: lightblue;
        --color-biome-wasteland: gray;
        --color-biome-none: black;
    }

    #worldMapFrame {
        max-width: 800px;
        max-height: 800px;
        border: 3px solid var(--frame-color);
        background-color: var(--back-color-special);
        overflow: auto;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
    }

    .worldMapRow {
        display: flex;
        flex-direction: row;
        justify-content: flex-start;
        overflow: visible;
    }

    .worldMapCell {
        width: 40px;
        height: 40px;
        border: 1px solid black;
        flex-basis: 40px;
        flex-shrink: 0;
        display: flex;
        justify-content: center;
        align-items: center;
    }
</style>

@code {
    ZoneDescription?[,] Cells = { };

    protected override void OnInitialized()
    {
        var worldMap = CoreWrapper.WorldMap;
        List<Location> locations = new();

        Location? next = new(0, 0);
        for (int i = 0; i < 225; i++)
        {
            if (next == null)
                break;
            locations.Add(next);
            next = worldMap.GetNextLocation(next);
        }
        int xMin = locations.Select(l => l.X).Min();
        int xMax = locations.Select(l => l.X).Max();
        int yMin = locations.Select(l => l.Y).Min();
        int yMax = locations.Select(l => l.Y).Max();
        Cells = new ZoneDescription?[yMax - yMin + 1, xMax - xMin + 1];
        for (int y = yMin; y <= yMax; y++)
        {
            for (int x = xMin; x <= xMax; x++)
            {
                var zone = worldMap.GetZone(new(x, y));
                Cells[y - yMin, x - xMin] = zone;
            }
        }
        base.OnInitialized();
    }

    string GetCellStyle(ZoneDescription? zone)
    {
        string biomeName = (zone?.Biome) switch {
            Biome.Dungeon => "dungeon",
            Biome.Grassland => "grassland",
            Biome.Forest => "forest",
            Biome.Rainforest => "rainforest",
            Biome.Swamp => "swamp",
            Biome.Savannah => "savannah",
            Biome.Desert => "desert",
            Biome.Oasis => "oasis",
            Biome.Tundra => "tundra",
            Biome.IcyDesert => "icydesert",
            Biome.Wasteland => "wasteland",
            _ => "none"
        };
        return $"background-color: var(--color-biome-{biomeName})";
    }
}
